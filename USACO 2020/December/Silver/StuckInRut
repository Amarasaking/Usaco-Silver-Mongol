#include<bits/stdc++.h>

using namespace std;
using ll = long long ;

struct Co{
	ll x, y, ind;
};
int main() {
//	freopen("berries.in", "r", stdin);
//	freopen("berries.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll t, n, res, X, Y, Diff1, Diff2, max_a, m, ans, s, sum, x, y, r, p, i, j;
	
	cin >> n;
	
	vector < Co > Right, Up;
	
	char ch;
	for (i = 1; i <= n; i ++) {
		cin >> ch >> x >> y;
		if (ch == 'N') {
			Up.push_back(Co{x, y, i});
		}
		else Right.push_back(Co{x, y, i});
	}
	sort(Right.begin(), Right.end(), [](Co& A, Co& B){
		return make_pair(A.y, A.x) < make_pair(B.y, B.x);
	});
	sort(Up.begin(), Up.end(), [](Co& A, Co& B){
		return make_pair(A.x, A.y) < make_pair(B.x, B.y);
	});
	
	ll KillCount[1004] , Alive[1004];
	
	for (i = 0; i <= n; i ++) {
		Alive[i] = 1;
		KillCount[i] = 1;
	}
	
	ll Size = Right.size();
	for (i = 0; i < Right.size(); i ++) {
		for (j = 0; j < Up.size(); j ++) {
			if ( Alive[Right[i].ind] != 1 || Alive[Up[j].ind] != 1) continue;
			if ( Right[i].y >= Up[j].y && Right[i].x <= Up[j].x) {
				
				X = max(Right[i].x, Up[j].x);
				Y = max(Right[i].y, Up[j].y);
				Diff1 = X + Y - Right[i].x - Right[i].y;
				Diff2 = X + Y - Up[j].x - Up[j].y;
				if ( Diff1 == Diff2 ) continue;
				if ( Diff1 < Diff2) {
					Alive[Up[j].ind] = 0;
					KillCount[Right[i].ind] += KillCount[Up[j].ind];
				}
				else {
					Alive[Right[i].ind] = 0;
					KillCount[Up[j].ind] += KillCount[Right[i].ind];
				}
			}
		}
	}
	for (i = 1; i <= n; i ++) {
		cout << KillCount[i] - 1 << endl;
	}
}
