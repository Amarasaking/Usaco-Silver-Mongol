#include<bits/stdc++.h>

using namespace std;
using ll = long long ;
ll mod = 1e9 + 7;
int main() {
	freopen("triangles.in", "r", stdin);
	freopen("triangles.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll t, n, m, ans, Size, s, sum, x, y, r, p, i, j;

	cin >> n;
	
	vector < ll > X[20005], Y[20004];
	vector < ll > DisX[20004], DisY[20005];
	vector < pair < ll, ll > > Pos;
	set < int > xx, yy;
	for (i = 1; i <= n; i ++) {
		cin >> x >> y;
		x += 10000;
		y += 10000;
		xx.insert(x);
		yy.insert(y);
		Pos.push_back(make_pair(x, y));
		X[x].push_back(y);
		Y[y].push_back(x);
	}
	for ( ll eks : xx) {
		Size = X[eks].size();
		sort(X[eks].begin(), X[eks].end());
		ll Pre[Size + 2], Suf[Size + 2];
	
		for (j = 0; j < Size; j ++) {
			if ( j == 0) {
				Pre[j] = X[eks][j];
			}
			else Pre[j] = Pre[j - 1] + X[eks][j];
		}
		Suf[Size] = 0;
		for (j = Size - 1; j >= 0; j --) {
			Suf[j] = Suf[j + 1] + X[eks][j];
		}
		
		for (j = 0; j < Size; j ++) {
			s = (j + 1) * X[eks][j] - (Pre[j]);
			s = s + Suf[j + 1] - (Size - j -1) * (X[eks][j]);
			DisX[eks].push_back(s);
		}
	}
	for ( ll eks : yy) {
		Size = Y[eks].size();
		sort(Y[eks].begin(), Y[eks].end());
		ll Pre[Size + 2], Suf[Size + 2];
	
		for (j = 0; j < Size; j ++) {
			if ( j == 0) {
				Pre[j] = Y[eks][j];
			}
			else Pre[j] = Pre[j - 1] + Y[eks][j];
		}
		Suf[Size] = 0;
		for (j = Size - 1; j >= 0; j --) {
			Suf[j] = Suf[j + 1] + Y[eks][j];
		}
		
		for (j = 0; j < Size; j ++) {
			s = (j + 1) * Y[eks][j] - (Pre[j]);
			s = s + Suf[j + 1] - (Size - j -1) * (Y[eks][j]);
			DisY[eks].push_back(s);
		}
	}
	ans = 0;
	for (i = 0; i < n; i ++) {
		x = Pos[i].first;
		y = Pos[i].second;
		s = find(X[x].begin(), X[x].end(), y) - X[x].begin();
		r = find(Y[y].begin(), Y[y].end(), x) - Y[y].begin();
		ans += (DisX[x][s] * DisY[y][r]);
		ans %= mod;
	}
	cout << ans << endl;
}
