#include<bits/stdc++.h>

using namespace std;
using ll = long long ;

ll ataman[200005];

ll Avah(ll x) {
	if ( x == ataman[x]) return x;
	return ataman[x] = Avah(ataman[x]);
}
void Negtgeh(ll x, ll y) {
	x = Avah(x);
	y = Avah(y);
	if ( x == y) return ;
	ataman[x] = y;
}
struct needConnect {
	ll x, y;
};
struct WormHole{
	ll x, y, urgun;
};
bool cmp (WormHole &A, WormHole &B) {
	return A.urgun > B.urgun;
}

void Solve() {
	ll n, i, x, y, s, m;
	
	cin >> n >> m;
	
	ll a[n + 2];
	
	for (i = 1; i <= n; i ++) {
		ataman[i] = i;
		cin >> a[i];
	}
	vector < needConnect > v;
	for (i = 1; i <= n; i ++) {
		v.push_back({a[i], i});
	}
	vector < WormHole > V;
	for ( i = 1; i <= m; i ++) {
		cin >> x >> y >> s;
		V.push_back({x, y, s});
	}
	sort (V.begin(), V.end(), cmp);
	
	while(!v.empty() && Avah(v.back().x) == Avah(v.back().y)) {
		v.pop_back();			
	}
	if(v.empty()) {
		cout << -1 <<endl;
		return ;
	}
	for (i = 0; i < V.size(); i ++) {
		Negtgeh(V[i].x , V[i].y);		
		while(!v.empty() && Avah(v.back().x) == Avah(v.back().y)) {
			v.pop_back();			
		}
		if (v.empty()) {
			cout << V[i].urgun << endl;
			return ;
		}
	}
}

int main() {
		freopen("wormsort.in", "r", stdin);
	freopen("wormsort.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll t, n, m, ans, s, sum, x, y, r, p, i, j;

	Solve();
}
