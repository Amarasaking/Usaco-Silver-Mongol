#include<bits/stdc++.h>
 
using namespace std;
using ll = long long;
const ll N = 1e5 + 1;

int n, l; 
vector < int > adj[N];

int height[N], ans[N], value[N];

vector < pair < int, int > > Q[N];
vector < int > V[N];
int A[N];
int timer = 0;
int tin[N], tout[N];
int up[N][20];
int Has[4*N];
vector <int > Ind[N];

void dfs(int v, int p) {
	up[v][0] = p;
	for ( int i = 1; i <= 19; i ++) {
		up[v][i] = up[up[v][i -1]][i - 1];
	}
	
	for ( int u : adj[v]) {
		if (u != p) dfs(u, v);
	}
	return ;
}

bool is_ancestor(int u, int v) {
	return tin[u] <= tin[v] && tout[u] >= tout[v];
}

int lca(int u, int v) {
	if ( is_ancestor(u, v)) return u;
	if ( is_ancestor(v, u)) return v;
	for (int i = 19; i >= 0; i --) {
		if ( !is_ancestor(up[u][i], v)) u = up[u][i];
	}
	return up[u][0];
}


int cnt =0;
void euler_tour(int v, int p, int dist) {
	tin[v] = ++cnt;
	for ( int u : adj[v]) {
		if ( u != p) {
			euler_tour(u, v, dist + 1);
		}
	}
	tout[v] = cnt;
}

void Update(int p, int lo, int hi, int l, int r, int x) {
	if ( l <= lo && hi <= r) {
		Has[p] += x;
		return ;
	}
	if ( l > hi || lo > r) return ;
	int mid = (lo +hi)/2;
	Has[2 * p] += Has[p];
	Has[2 * p + 1] += Has[p];
	Has[p] = 0;
	Update(2 *p, lo, mid, l, r, x);
	Update(2 * p + 1, mid + 1, hi, l, r, x);
}
int Find(int p, int lo, int hi, int x) {
	if ( lo == hi) return Has[p];
	Has[2 * p] += Has[p];
	Has[2 * p + 1] += Has[p];
	Has[p] = 0;
	int mid = (lo + hi)/2;
	if ( x <= mid) return Find(2 * p, lo, mid, x);
	return Find(2 * p + 1, mid + 1, hi, x);
}

int main() {
	freopen("milkvisits.in", "r", stdin);
	freopen("milkvisits.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll n, q, i, X, j, Y, x, y, r, s;
	
	cin >> n >> q;
	
	for (i = 1; i <= n; i ++) {
		cin >> value[i];
		V[value[i]].push_back(i);
	}
	
	for (i = 1; i < n; i ++) {
		cin >> x >> y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	
	euler_tour(1, 1, 0);
	dfs(1, 1);
	
	for (i = 1; i <= q; i ++) {
		int a, b, c;
		cin >> a >> b >> c;
		Q[c].push_back({a, b});
		Ind[c].push_back(i);
	}
	for ( int I = 1; I <= 1e5; I ++) {
		int arr[Q[I].size() + 1];
		for ( j = 0; j < Q[I].size(); j ++) {
			r = lca(Q[I][j].first , Q[I][j].second);
			s = Find(1, 1, n, tin[Q[I][j].first]) + Find(1, 1, n, tin[Q[I][j].second]) - Find(1, 1, n, tin[r]);
			if ( r != 1) {
				r = up[r][0];
				s = s - Find(1, 1, n, tin[r]);
			}
			arr[j] = s;
		}
		for ( i = 0; i < V[I].size(); i ++) {
			Update(1, 1, n, tin[V[I][i]], tout[V[I][i]], 1);
		}
		for ( j = 0; j < Q[I].size(); j ++) {
			r = lca(Q[I][j].first , Q[I][j].second);
			s = Find(1, 1, n, tin[Q[I][j].first]) + Find(1, 1, n, tin[Q[I][j].second]) - Find(1, 1, n, tin[r]);
			if ( r != 1) {
				r = up[r][0];
				s = s - Find(1, 1, n, tin[r]);
			}
			if ( s != arr[j]) ans[Ind[I][j]] = 1;
			else ans[Ind[I][j]] = 0;
		}
	}
	for (i = 1; i<= q; i ++) {
		cout << ans[i] ;
	} 
}
