#include<bits/stdc++.h>

using namespace std;
using ll = long long ;
using pll  = pair < ll, ll>;

struct Q {
	ll x, y, c, f;
};
bool cmp(Q& A, Q& B) {
	return A.f > B.f;
}
ll n;
vector < pll > adj[1002];
Q a[1005];
ll D[1002];
ll Go() {
	ll r;
	priority_queue < pll, vector< pll>, greater < pll > > pq;
	pq.push({0, 1});
	memset(D, 64, sizeof(D));
	D[1]= 0;
	while(!pq.empty()) {
		r = pq.top().second;
		pq.pop();
		for ( pll& P : adj[r]) {
			if ( D[P.first] > D[r] + P.second) {
				D[P.first] = D[r] + P.second;
				pq.push({D[P.first], P.first});
			}
		}
	}
	return D[n];
}

int main() {
	freopen("pump.in", "r", stdin);
	freopen("pump.out", "w", stdout);
	ll m, i,r, x, s, ans, y;
	
	cin >> n >> m;
	
	for (i = 1; i <= m; i ++) {
		cin >> a[i].x >> a[i].y >> a[i].c >> a[i].f;
	}
	
	sort ( a + 1, a + m + 1, cmp);
	ans =0;
	for (i = 1; i <= m; i ++) {
		r = a[i].f;
		adj[a[i].x].push_back({a[i].y, a[i].c});
		adj[a[i].y].push_back({a[i].x, a[i].c});
		s = Go();
		r =(r * 1e6)/s;
		ans = max(ans, r);
	}
	cout << ans << endl;
}
