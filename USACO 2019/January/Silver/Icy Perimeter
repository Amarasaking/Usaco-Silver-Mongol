#include<bits/stdc++.h>

using namespace std;
using ll = long long ;
ll a[1002][1002], b[1002][1002];
ll s, p;
void Dfs(ll x, ll y) {
	b[x][y] = 1;
	s ++;
	p += 4;
	
	if ( a[x + 1][y] == 1) {
		p --;
		if ( b[x + 1][y] == 0) Dfs(x + 1, y);
	}
	if ( a[x - 1][y] == 1) {
		p --;
		if ( b[x - 1][y] == 0) Dfs(x - 1, y);
	}
	if ( a[x][y + 1] == 1) {
		p --;
		if ( b[x][y + 1] == 0) Dfs(x, y + 1);
	}
	if ( a[x][y - 1] == 1) {
		p --;
		if ( b[x][y - 1] == 0) Dfs(x, y - 1);
	}
	return ;
}

int main() {
	freopen("perimeter.in", "r", stdin);
	freopen("perimeter.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll t, n, m, ans, sum, x, y, r, i, j, max_p, max_s;
	
	cin >> n;
	
	string str[n + 2];
	
	
	for (i = 1; i <= n; i ++) {
		cin >> str[i];
		
		for (j = 0; j < n; j++) {
			a[i][j + 1] = (str[i][j] == '#');
		}
	}
	max_s = max_p = 0;
	for (i = 1; i <= n; i ++) {
		for (j = 1; j <= n; j ++) {
			if ( a[i][j] == 1) {
				s = p = 0;
				Dfs(i, j);
				if ( s > max_s) {
					max_s = s;
					max_p = p;
				}
				else {
					if ( s == max_s) max_p = min(max_p, p);
				}
			}
		}
	}
	cout << max_s << " " << max_p << endl;
}
