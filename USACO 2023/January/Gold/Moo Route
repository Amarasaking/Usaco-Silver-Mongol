#include<bits/stdc++.h>

using namespace std;
using ll = long long ;

ll mod = 1e9 + 7;
const int MAX_N = 1e6;
ll n, fac[MAX_N + 1], inv[MAX_N + 1], invfac[MAX_N + 1];

ll C(ll x, ll y) {
	ll r = fac[x];
	r = r * invfac[x - y];
	r %= mod;
	r = r * invfac[y];
	r %= mod;
	return r;
}

void Solve() {
	ll i, p, s;
	cin >> n;
	
	ll a[n + 2];
	p = 1;
	for (i = 1; i <= n; i ++) {	
		cin >> a[i];
		a[i]/=2;
	}
	ll ans = 1;
	for (i = n - 1; i >= 1; i --) {
		if ( a[i] > a[i + 1]) {
			ans = ans * C(a[i], a[i + 1]);
		}
		else ans = ans * (C(a[i + 1] - 1, a[i] - 1));
		ans %= mod;
	}
	cout << ans << endl;
	
}

int main() {
//	freopen("moocast.in", "r", stdin);
//	freopen("moocast.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll i;
	
	fac[0]= 1;
	inv[0]= inv[1] = 1;
	invfac[0] = invfac[1] = 1;
	for (i = 1; i <= MAX_N; i ++) {
		if ( i >= 2) {
			inv[i]= (mod - mod/i) * (inv[mod % i]) % mod;
			invfac[i] = invfac[i - 1] * inv[i];
			invfac[i] %= mod;
		}
		fac[i] = fac[i - 1] * i % mod;
	}
	Solve();

}
