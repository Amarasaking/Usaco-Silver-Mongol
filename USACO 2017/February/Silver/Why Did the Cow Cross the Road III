#include<bits/stdc++.h>
 
using namespace std;
using ll =int ;
ll CantGo[102][102][5] = {0}, N, Used[102][102], cnt;
bool Cow[102][102];
bool YvjBolhuu(ll x, ll y) {
	if (Used[x][y] == 0 && x >= 1 && x <= N && y >= 1 && y <= N) return true;
	return false;
}

void Go(ll x, ll y) {
	cnt += (Cow[x][y]);
	Used[x][y] = 1;
	if ( YvjBolhuu(x - 1, y) && CantGo[x][y][1] == 0) Go(x - 1, y);	
	if ( YvjBolhuu(x, y + 1) && CantGo[x][y][2] == 0) Go(x, y + 1);	
	if ( YvjBolhuu(x + 1, y) && CantGo[x][y][3] == 0) Go(x + 1, y);	
	if ( YvjBolhuu(x, y - 1) && CantGo[x][y][4] == 0) Go(x, y - 1);	
}

int main() {
	freopen("countcross.in", "r", stdin);
	freopen("countcross.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll t, n, m, ans, s, cntsum, sum, r, p, i, j, K, R, c, r1, c1;
	
	cin >> N >> K >> R;
	
	for (i = 1; i <= R; i ++) {
		cin >> r >> c >> r1 >> c1;
		if ( r == r1) {
			if ( c - c1 == 1) {
				CantGo[r][c][4] = 1;
				CantGo[r1][c1][2] = 1;
			} 
			else {
				CantGo[r][c][2] = 1;
				CantGo[r1][c1][4] = 1;
			}
		}
		else {
			if ( r - r1 == 1) {
				CantGo[r][c][1] = 1;
				CantGo[r1][c1][3] = 1;
			}
			else {
				CantGo[r][c][3] = 1;
				CantGo[r1][c1][1] = 1;
			}
			
		}
	}
	vector < ll > V;
	cnt = 0;
	cntsum = 0;
	ll x[K + 2], y[K + 2];
	
	for (i = 1; i <= K; i ++) {
		cin >> x[i] >> y[i];
		Cow[x[i]][y[i]] = true;
	}
	ans = 0;
	for (i = 1; i <= K; i ++) {
		if ( Used[x[i]][y[i]] == 0) {
			cnt = 0;
			Go(x[i], y[i]);
			ans = ans + (cnt) * (K - cnt);
		}
	}
	cout << ans / 2<< endl;
}
