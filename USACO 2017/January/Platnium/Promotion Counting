#include<bits/stdc++.h>

using namespace std;
using ll = long long ;
const int N = 1e5 + 1;

vector < int > adj[N];
int in[N], out[N], ans[N], timer = 0;

void euler_tour(int x, int p) {
	in[x] = ++timer;
	for ( int X : adj[x]) {
		if ( X != p) {
			euler_tour(X, x);
		}
	}
	out[x] = timer;
}

int Tre[4 * N];
int Find(int p, int lo, int hi, int l, int r) {
	if ( l <= lo && hi <= r) {
		return Tre[p];
	}
	if ( l > hi || lo > r) return 0;
	int mid = (lo + hi)/2;
	return Find(2 * p, lo, mid, l, r) + Find(2 * p + 1, mid + 1, hi, l, r);
}
void Update(int p, int lo, int hi, int x) {
	if ( lo == hi) {
		Tre[p] = 1;
		return ;
	}
	int  mid = (lo +hi)/2;
	if ( x <= mid) Update(2 * p, lo, mid, x);
	else Update(2 * p + 1, mid + 1, hi, x);
	Tre[p] = Tre[2 * p] + Tre[2 * p + 1];
}

int main() {
	freopen("promote.in", "r", stdin);
	freopen("promote.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n, i, x,ind, s;
	
	cin >> n;
	
	vector < pair < ll, ll > > P;
	for (i = 1; i <= n; i ++) {
		cin >> x;
		P.push_back(make_pair(x, i));
	}
	sort(P.begin(), P.end());
	
	for (i = 2; i <= n; i ++) {
		cin >> x;
		adj[x].push_back(i);
		adj[i].push_back(x);
	}
	
	euler_tour(1, 1);
	reverse(P.begin(), P.end());
	
	for ( auto R : P) {
		s = R.first;
		ind = R.second;
		ans[ind] = Find(1, 1, n, in[ind], out[ind]);
		Update(1, 1, n, in[ind]);
	}
	for (i = 1; i <= n; i ++) {
		cout << ans[i] << endl;
	}
	
}
