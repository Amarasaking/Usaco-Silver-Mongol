#include<bits/stdc++.h>

using namespace std;
using ll = long long ;
const ll N = 1e5 + 2;
ll mod = 1e9 + 7;
ll T[4 * N + 2];
void Build(ll p, ll lo, ll hi) {
	if ( lo == hi) {
		T[p] = 1;
		return ;
	}
	ll mid = (lo + hi)/2;
	Build(2 * p, lo, mid);
	Build(2 * p + 1, mid + 1, hi);
	T[p] = T[2 * p] + T[2 * p + 1];
}
void Update(ll p, ll lo, ll hi, ll x, ll y) {
	if ( lo == hi) {
		T[p] = y;
		return ;
	}
	ll mid = (lo + hi)/2;
	if ( x <= mid) Update(2 * p, lo, mid, x, y);
	else Update(2 * p + 1, mid + 1, hi, x, y);
	T[p] = T[2 * p] + T[2 * p + 1];
}
ll Find(ll p, ll lo, ll hi, ll l, ll r) {
	if (l > r) return 0;
	if ( l > hi || lo > r) return 0;
	if ( l <= lo && hi <= r) return T[p];
	ll mid = (lo + hi)/2;
	return (Find(2 * p, lo, mid, l, r) + Find(2 * p + 1, mid + 1, hi, l, r));
}
vector < ll > v;
ll Pre[N], Suf[N];
ll A(ll x) {
	return upper_bound(v.begin(), v.end(), x) - v.begin();
}
int main() {
	freopen("bphoto.in", "r", stdin);
	freopen("bphoto.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll n, s, i, ans;
	
	cin >> n;

	ll a[n + 2];
	
	
	for (i = 1; i <= n; i ++) {
		cin >> a[i];
		v.push_back(a[i]);
	}	
	sort(v.begin(), v.end());
	v.erase(unique(v.begin(), v.end()), v.end());
	
	s = 0;
	for (i = 1; i <= n; i ++) a[i] = A(a[i]);	
	for (i = 1; i <= n; i ++) {
		s = Find(1, 1, N, a[i] + 1, N);
		Pre[i] = s;
		Update(1, 1, N, a[i], 1);
	}
	for (i = 1; i < 4* N; i ++) T[i] = 0;
	for (i = n; i >= 1; i --) {
		s = Find(1, 1, N, a[i] + 1, N);
		Suf[i] = s;
		Update(1, 1, N, a[i],1 );
	}
	ans =0;
	for (i = 1; i <= n; i ++) {
		if ( Pre[i] > Suf[i] * 2 || Suf[i] > Pre[i] * 2) ans ++;
 	}
 	cout << ans << endl;
	
}
