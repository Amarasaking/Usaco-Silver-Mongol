#include<bits/stdc++.h>

using namespace std;
using ll = long long ;

ll ataman[100004], Min[100005], Max[100005], NegZai[100005], LastZai[100005], Max_size ;


ll Avah(ll x) {
	if ( x == ataman[x]) return x;
	return ataman[x] = Avah(ataman[x]);
}

void Negtgeh(ll x, ll y) {
	x = Avah(x);
	y = Avah(y);
	if ( x < y) swap(x, y);
	if ( x == y) return ;
	ataman[y] = x;	
	Max[x] = max(Max[x], Max[y]);
	Min[x] = min(Min[x], Min[y]);
	NegZai[x] = min(NegZai[x], NegZai[y]);
	LastZai[x] = min(LastZai[x], LastZai[y]);
}
int main() {
//	freopen("moocast.in", "r", stdin);
//	freopen("moocast.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll t, m, ans, n, mid, lo, hi, s, sum, x, y, r, p, i, j, T;
	
	cin >> T;
	ll I = 1;
	while ( T --) {
		cin >> n >> m;
		Max_size = 0;
		for (i = 1;  i<= n; i ++) {
			ataman[i] = i;
			NegZai[i] = (i - 1) * (i - 1);
			LastZai[i] = (n -i) * (n - i);
		}
		ll X[m + 2], Y[m + 2];
		for (i = 1; i <= m; i ++) {
			cin >> x >> y;
			X[i] = x;
			Y[i]= y;
			Negtgeh(x, y);
		}
		Max_size = 1e18;
		set < ll > S;
		vector < ll > Neg, Last;
		for (i = 1; i <= n; i++) {
			if ( Avah(i) == Avah(1)) Neg.push_back(i);
			if ( Avah(i) == Avah(n)) Last.push_back(i);
		}
		sort(Neg.begin(), Neg.end());
		sort(Last.begin(), Last.end());
		
		for (i = 1; i <= n; i ++) {
			ataman[i] = i;
			NegZai[i] = LastZai[i] = 1e9;
			r = lower_bound(Neg.begin(), Neg.end(), i) - Neg.begin();
			if ( r != Neg.size()) {
				NegZai[i]= min(NegZai[i], abs(i - Neg[r]));
			}
			r --;
			if ( r != -1) {
				NegZai[i]= min(NegZai[i], abs(i - Neg[r]));
			}
			r = lower_bound(Last.begin(), Last.end(), i) - Last.begin();
			if ( r != Neg.size()) {
				LastZai[i]= min(LastZai[i], abs(i - Last[r]));
			}
			r --;
			if ( r != -1) {
				LastZai[i]= min(LastZai[i], abs(i - Last[r]));
			}
		}
		for (i = 1; i <= m; i ++) {
			Negtgeh(X[i], Y[i]);
		}
		for (i = 1; i <= n; i ++) {
			r = Avah(i);
			r = NegZai[r] * NegZai[r] + LastZai[r] * LastZai[r];
			Max_size = min(Max_size, r);
		}
		cout << Max_size << endl;
	}
}
